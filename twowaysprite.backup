#include <iostream>
#include <cmath>
#include "twowaysprite.h"
#include "gamedata.h"
#include "frameFactory.h"
#include "vector2f.h"

void TwoWaySprite::advanceFrame(Uint32 ticks) {
	timeSinceLastFrame += ticks;
	if (timeSinceLastFrame > frameInterval) {
           Vector2f velo =  this->getVelocity();
           if (velo[0] > 0) {
              currentFrame = (currentFrame + 1) % (numberOfFrames/2);
            }else if (velo[0] == 0 && velo[1] != 0)
               currentFrame = (currentFrame + 1) % (numberOfFrames/2);
            else if(velo[0] < 0){
                currentFrame = (currentFrame +1) % numberOfFrames/2 + numberOfFrames/2;
            }else
               currentFrame = 0;

            timeSinceLastFrame = 0;
	}
}

TwoWaySprite::TwoWaySprite( const std::string& name) :
  Drawable(name,
           Vector2f(Gamedata::getInstance().getXmlInt(name+"X"),
                    Gamedata::getInstance().getXmlInt(name+"Y")),
           Vector2f(Gamedata::getInstance().getXmlInt(name+"SpeedX"),
                    Gamedata::getInstance().getXmlInt(name+"SpeedY"))
           ),
  frames( FrameFactory::getInstance().getTwoWayFrames(name) ),
  worldWidth(Gamedata::getInstance().getXmlInt("worldWidth")),
  worldHeight(Gamedata::getInstance().getXmlInt("worldHeight")),

  dt(0),
  currentFrame(0),
  numberOfFrames( Gamedata::getInstance().getXmlInt(name+"Frames") ),
  frameInterval( Gamedata::getInstance().getXmlInt(name+"FrameInterval") ),
  timeSinceLastFrame( 0 ),
  frameWidth(frames[0]->getWidth()),
  frameHeight(frames[0]->getHeight()),
  speed(Gamedata::getInstance().getXmlInt(name+"Speed"))
{ }

TwoWaySprite::TwoWaySprite(const std::string& name,
                         const Vector2f& pos, const Vector2f& vel,
                         const std::vector<Frame*>& fms) :
  Drawable(name, pos, vel),
  frames(fms),
  worldWidth(Gamedata::getInstance().getXmlInt("worldWidth")),
  worldHeight(Gamedata::getInstance().getXmlInt("worldHeight")),

  dt(0),
  currentFrame(0),
  numberOfFrames( Gamedata::getInstance().getXmlInt(name+"Frames") ),
  frameInterval( Gamedata::getInstance().getXmlInt(name+"FrameInterval") ),
  timeSinceLastFrame( 0 ),
  frameWidth(fms[0]->getWidth()),
  frameHeight(fms[0]->getHeight()),
  speed(Gamedata::getInstance().getXmlInt(name+"Speed"))
{ }

TwoWaySprite::TwoWaySprite(const TwoWaySprite& s) :
  Drawable(s.getName(), s.getPosition(), s.getVelocity()),
  frames(s.frames),
  worldWidth( s.worldWidth ),
  worldHeight( s.worldHeight ),
  dt(s.dt),
  currentFrame(s.currentFrame),
  numberOfFrames( s.numberOfFrames ),
  frameInterval( s.frameInterval ),
  timeSinceLastFrame( s.timeSinceLastFrame ),
  frameWidth( s.frameWidth ),
  frameHeight( s.frameHeight ),
  speed(s.speed)
  { }

void TwoWaySprite::goForward(){
   velocityX(speed);
}

void TwoWaySprite::goBack(){
   velocityX(-speed);
}

void TwoWaySprite::goUp(){
   velocityY(-speed);
}

void TwoWaySprite::goDown(){
   velocityY(speed);
}

void TwoWaySprite::stop(){
   velocityX(0);
   velocityY(0);
}

void TwoWaySprite::draw() const {
  Uint32 x = static_cast<Uint32>(X());
  Uint32 y = static_cast<Uint32>(Y());
  frames[currentFrame]->draw(x, y);
}

void TwoWaySprite::update(Uint32 ticks) {
  advanceFrame(ticks);

  Vector2f incr = getVelocity() * static_cast<float>(ticks) * 0.001;
  setPosition(getPosition() + incr);

  if ( Y() < 0) {
     Y(0);
    velocityY( abs( velocityY() ) );
  }
  if ( Y() > worldHeight-frameHeight) {
     Y(worldHeight-frameHeight);
    velocityY( -abs( velocityY() ) );
  }

  if ( X() < 0) {
    velocityX( abs( velocityX() ) );
    X(0);
  }
  if ( X() > worldWidth-frameWidth) {
    //velocityX( -abs( velocityX() ) );
    X(worldWidth-frameWidth);
  }

}
